module Map exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/gomeet/elm-protobuf
-- source file: map.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type alias Map =
    { stringToString : List Map_StringToStringEntry -- 1
    }


mapDecoder : JD.Decoder Map
mapDecoder =
    JD.lazy <| \_ -> decode Map
        |> repeated "stringToString" map_StringToStringEntryDecoder


mapEncoder : Map -> JE.Value
mapEncoder v =
    JE.object <| List.filterMap identity <|
        [ (repeatedFieldEncoder "stringToString" map_StringToStringEntryEncoder v.stringToString)
        ]


type alias Map_StringToStringEntry =
    { key : String -- 1
    , value : String -- 2
    }


map_StringToStringEntryDecoder : JD.Decoder Map_StringToStringEntry
map_StringToStringEntryDecoder =
    JD.lazy <| \_ -> decode Map_StringToStringEntry
        |> required "key" JD.string ""
        |> required "value" JD.string ""


map_StringToStringEntryEncoder : Map_StringToStringEntry -> JE.Value
map_StringToStringEntryEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "key" JE.string "" v.key)
        , (requiredFieldEncoder "value" JE.string "" v.value)
        ]
